{
	"info": {
		"_postman_id": "2120521b-7c7e-4005-a947-53176c2ef754",
		"name": "FIWARE Entity Relationships",
		"description": "This tutorial builds on the data created in the previous store finder example and creates and associates a series of related data entities to create a simple stock management system.\n\n## Entities within a stock management system\n\nWithin the FIWARE platform, an entity represents the state of a physical or conceptural object which exists in the real world.\n\nFor a simple stock management system, we will only need four types of entity. The relationship between our entities is defined as shown:\n\n![](https://fiware.github.io/tutorials.Entity-Relationships/img/entities.png)\n\n* A **Store** is a real world bricks and mortar building. Stores would have properties such as:\n  + A name of the store e.g. \"Checkpoint Markt\"\n  + An address \"Friedrichstraße 44, 10969 Kreuzberg, Berlin\"\n  + A phyiscal location  e.g. *52.5075 N, 13.3903 E*\n* A **Shelf** is a real world device to hold objects which we wish to sell. Each shelf would have properties such as:\n  + A name of the shelf e.g. \"Wall Unit\"\n  + A phyiscal location  e.g. *52.5075 N, 13.3903 E*\n  + A maximum capacity\n  + An association to the store in which the shelf is present\n* A **Product** is defined as something that we sell - it is conceptural object. Products would have properties such as:\n  + A name of the product e.g. \"Vodka\"\n  + A price e.g. 13.99 Euros\n  + A size e.g. Small\n* An **Inventory Item** is another conceptural entity, used to assocate products, stores, shelves and physical objects. It would have properties such as:\n  + An assocation to the product being sold\n  + An association to the store in which the product is being sold\n  + An association to the shelf where the product is being displayed\n  + A stock count of the quantity of the product available in the warehouse\n  + A stock count of the quantity of the product available on the shelf\n\n\nAs you can see, each of the entities defined above contain some properties which are liable to change. A product could change its price, stock could be sold and the shelf count of stock could be reduced and so on.\n\n\n## Architecture\n\nThis application will only make use of one FIWARE component - the [Orion Context Broker](https://catalogue.fiware.org/enablers/publishsubscribe-context-broker-orion-context-broker). Usage of the Orion Context Broker is sufficient for an application to qualify as “Powered by FIWARE”.\n\nCurrently, the Orion Context Broker relies on open source [MongoDB](https://www.mongodb.com/) technology to keep persistence of the context data it holds. Therefore, the architecture will consist of two elements:\n\n* The Orion Context Broker server which will receive requests using NGSI\n* The underlying MongoDB database associated to the Orion Context Broker server\n\nSince all interactions between the two elements are initiated by HTTP requests, the entities can be containerized and run from exposed ports. \n\n![](https://fiware.github.io/tutorials.Entity-Relationships/img/architecture.png)\n\n\n## Start Up\n\nAll services can be initialised from the command line by running the bash script provided within the repository:\n\n```bash\n./services start\n``` ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Re-create two Stores (optional)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actionType\": \"APPEND\",\n  \"entities\": [\n    {\n    \t\"type\": \"STORE\",\n    \t\"id\": \"shop1\",\n    \t\"address\": {\n        \"type\": \"PostalAddress\",\n        \"value\": {\n            \"streetAddress\": \"Bornholmer Straße 65\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Prenzlauer Berg\",\n            \"postalCode\": \"10439\"\n\t        }\n\t    },\n\t    \"location\": {\n\t        \"type\": \"geo:json\",\n\t        \"value\": {\n\t           \"type\": \"Point\",\n\t           \"coordinates\": [13.3986, 52.5547]\n\t        }\n\t    },\n    \t\"name\": {\n        \t\"type\": \"Text\",\n        \t\"value\": \"Bose Brucke Einkauf\"\n    \t}\n    },\n    {\n    \t\"type\": \"STORE\",\n        \"id\": \"shop2\",\n\t    \"address\": {\n\t        \"type\": \"PostalAddress\",\n\t        \"value\": {\n\t            \"streetAddress\": \"Friedrichstraße 44\",\n\t            \"addressRegion\": \"Berlin\",\n\t            \"addressLocality\": \"Kreuzberg\",\n\t            \"postalCode\": \"10969\"\n\t        }\n\t    },\n\t    \"location\": {\n\t        \"type\": \"geo:json\",\n\t        \"value\": {\n\t             \"type\": \"Point\",\n\t             \"coordinates\": [13.3903, 52.5075]\n\t        }\n\t    },\n\t    \"name\": {\n\t        \"type\": \"Text\",\n\t        \"value\": \"Checkpoint Markt\"\n\t    }\n    }\n  ]\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/op/update",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"op",
						"update"
					]
				},
				"description": "This example uses the convenience batch processing endpoint to re-create the two stores from the previous tutorial.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=APPEND` means we will overwrite existing entities if they exist whereas the  `entities` attribute holds an array of entities we wish to update.\n\nAs you can see each store in the payload has been given a unique `id` and assigned `type=STORE`. \n\n(**Note** the values of each entity `type` has been capitalized help to distinguish them from other data.)"
			},
			"response": []
		},
		{
			"name": "Create Five Shelf Units",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actionType\":\"APPEND\",\n  \"entities\":[\n    {\n      \"id\":\"unit001\", \"type\":\"SHELF\",\n      \"location\":{\n        \"type\":\"geo:json\", \"value\":{ \"type\":\"Point\",\"coordinates\":[13.3986112, 52.554699]}\n      },\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Corner Unit\"\n      },\n      \"max_capacity\":{\n        \"type\":\"Integer\", \"value\":50\n      }\n    },\n    {\n      \"id\":\"unit002\", \"type\":\"SHELF\",\n      \"location\":{\n        \"type\":\"geo:json\",\"value\":{\"type\":\"Point\",\"coordinates\":[13.3987221, 52.5546640]}\n      },\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Wall Unit 1\"\n      },\n      \"max_capacity\":{\n        \"type\":\"Integer\", \"value\":100\n      }\n    },\n    {\n      \"id\":\"unit003\", \"type\":\"SHELF\",\n      \"location\":{\n        \"type\":\"geo:json\", \"value\":{\"type\":\"Point\",\"coordinates\":[13.3987221, 52.5546640]}\n      },\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Wall Unit 2\"\n      },\n      \"max_capacity\":{\n        \"type\":\"Integer\", \"value\":100\n      }\n    },\n    {\n      \"id\":\"unit004\", \"type\":\"SHELF\",\n      \"location\":{\n        \"type\":\"geo:json\", \"value\":{\"type\":\"Point\",\"coordinates\":[13.390311, 52.507522]}\n      },\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Corner Unit\"\n      },\n      \"max_capacity\":{\n        \"type\":\"Integer\", \"value\":50\n      }\n    },\n    {\n      \"id\":\"unit005\", \"type\":\"SHELF\",\n      \"location\":{\n        \"type\":\"geo:json\",\"value\":{\"type\":\"Point\",\"coordinates\":[13.390309, 52.50751]}\n      },\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Long Wall Unit\"\n      },\n      \"max_capacity\":{\n        \"type\":\"Integer\", \"value\":200\n      }\n    }\n  ]\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/op/update",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"op",
						"update"
					]
				},
				"description": "This example uses the convenience batch processing endpoint to create the five shelf entities.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=APPEND` means we will overwrite existing entities if they exist whereas the  `entities` attribute holds an array of entities we wish to update.\n\nTo differenciate Shelf Entities from Store Entities, each shelf has been assigned `type=SHELF`.\n\nReal-world properties such as `name` and `location` have been addded as properties to each shelf."
			},
			"response": []
		},
		{
			"name": "Create Four Products",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actionType\":\"APPEND\",\n  \"entities\":[\n    {\n      \"id\":\"prod001\", \"type\":\"PRODUCT\",\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Beer\"\n      },\n      \"size\":{\n        \"type\":\"Text\", \"value\": \"S\"\n      },\n      \"price\":{\n        \"type\":\"Integer\", \"value\": 99\n      }\n    },\n    {\n      \"id\":\"prod002\", \"type\":\"PRODUCT\",\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Red Wine\"\n      },\n      \"size\":{\n        \"type\":\"Text\", \"value\": \"M\"\n      },\n      \"price\":{\n        \"type\":\"Integer\", \"value\": 1099\n      }\n    },\n    {\n      \"id\":\"prod003\", \"type\":\"PRODUCT\",\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"White Wine\"\n      },\n      \"size\":{\n        \"type\":\"Text\", \"value\": \"M\"\n      },\n      \"price\":{\n        \"type\":\"Integer\", \"value\": 1499\n      }\n    },\n    {\n      \"id\":\"prod004\", \"type\":\"PRODUCT\",\n      \"name\":{\n        \"type\":\"Text\", \"value\":\"Vodka\"\n      },\n      \"size\":{\n        \"type\":\"Text\", \"value\": \"XL\"\n      },\n      \"price\":{\n        \"type\":\"Integer\", \"value\": 5000\n      }\n    }\n  ]\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/op/update",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"op",
						"update"
					]
				},
				"description": "This example uses the convenience batch processing endpoint to create a series of available products.\n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=APPEND` means we will overwrite existing entities if they exist whereas the  `entities` attribute holds an array of entities we wish to update.\n\nEach product has a unique `id` and has been assigned `type=PRODUCT`."
			},
			"response": []
		},
		{
			"name": "Obtain Shelf Information",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/unit001/?type=SHELF&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"unit001",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "SHELF",
							"description": "Entity type"
						},
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						}
					]
				},
				"description": "This example returns the context data of the `SHELF` entity with the `id=unit001`.\n\nThere are currently three additional property attributes present `location`, `max_capacity` and `name`"
			},
			"response": [
				{
					"id": "0346de60-c63c-454e-8434-f517b821c18b",
					"name": "Shelf Context without a Foreign Key Attribute",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/unit001/?type=SHELF&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"unit001",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "SHELF"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Connection",
							"value": "Keep-Alive",
							"name": "Connection",
							"description": "Options that are desired for the connection"
						},
						{
							"key": "Content-Length",
							"value": "137",
							"name": "Content-Length",
							"description": "The length of the response body in octets (8-bit bytes)"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "The mime type of this content"
						},
						{
							"key": "Date",
							"value": "Thu, 12 Apr 2018 10:28:45 GMT",
							"name": "Date",
							"description": "The date and time that the message was sent"
						},
						{
							"key": "Fiware-Correlator",
							"value": "477dac20-3e3c-11e8-ac5b-0242ac120003",
							"name": "Fiware-Correlator",
							"description": "Custom header"
						}
					],
					"cookie": [],
					"body": "{\"id\":\"unit001\",\"type\":\"SHELF\",\"location\":{\"type\":\"Point\",\"coordinates\":[13.398611200,52.554699]},\"max_capacity\":50,\"name\":\"Corner Unit\"}"
				}
			]
		},
		{
			"name": "Adding a Foreign Key Relationship",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actionType\":\"APPEND\",\n  \"entities\":[\n    {\n      \"id\":\"unit001\", \"type\":\"SHELF\",\n      \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop1\"\n      }\n    },\n    {\n      \"id\":\"unit002\", \"type\":\"SHELF\",\n      \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop1\"\n      }\n    },\n    {\n      \"id\":\"unit003\", \"type\":\"SHELF\",\n      \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop1\"\n      }\n    },\n    {\n      \"id\":\"unit004\", \"type\":\"SHELF\",\n      \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop2\"\n      }\n    },\n    {\n      \"id\":\"unit005\", \"type\":\"SHELF\",\n      \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop2\"\n      }\n    }\n  ]\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/op/update",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"op",
						"update"
					]
				},
				"description": "This example uses batch processing to amend the existing the SHELF entities to add a `store` relationship to each Shelf. \n\nBatch processing uses the `/v2/op/update` endpoint with a payload with two attributes - `actionType=APPEND` means we will overwrite existing entities if they exist whereas the  `entities` attribute holds an array of entities we wish to update.\n\nThe value corresponds to a URN associated to a STORE entity"
			},
			"response": []
		},
		{
			"name": "Obtain Updated Shelf Information",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/unit001/?type=SHELF&options=keyValues",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"unit001",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "SHELF",
							"description": "Entity type"
						},
						{
							"key": "options",
							"value": "keyValues",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						}
					]
				},
				"description": "This example returns the context data of the `SHELF` entity with the `id=unit001`.\n\nThe response now includes a new property `store`, which has been added in the previous step."
			},
			"response": [
				{
					"id": "38a407e4-8c18-4667-b1b4-d78d4f1ea110",
					"name": "Shelf Context including a Foreign Key",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{orion}}/v2/entities/unit001/?type=SHELF&options=keyValues",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"entities",
								"unit001",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "SHELF"
								},
								{
									"key": "options",
									"value": "keyValues"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Connection",
							"value": "Keep-Alive",
							"name": "Connection",
							"description": "Options that are desired for the connection"
						},
						{
							"key": "Content-Length",
							"value": "171",
							"name": "Content-Length",
							"description": "The length of the response body in octets (8-bit bytes)"
						},
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "The mime type of this content"
						},
						{
							"key": "Date",
							"value": "Thu, 12 Apr 2018 10:31:19 GMT",
							"name": "Date",
							"description": "The date and time that the message was sent"
						},
						{
							"key": "Fiware-Correlator",
							"value": "a32b723c-3e3c-11e8-b2cc-0242ac120003",
							"name": "Fiware-Correlator",
							"description": "Custom header"
						}
					],
					"cookie": [],
					"body": "{\"id\":\"unit001\",\"type\":\"SHELF\",\"location\":{\"type\":\"Point\",\"coordinates\":[13.398611200,52.554699]},\"max_capacity\":50,\"name\":\"Corner Unit\",\"store\":\"urn:ngsi-ld:STORE:shop1\"}"
				}
			]
		},
		{
			"name": "Obtain a Foreign Key URN",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/unit001/?type=SHELF&options=values&attrs=store",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"unit001",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "SHELF",
							"description": "Entity type"
						},
						{
							"key": "options",
							"value": "values",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "attrs",
							"value": "store",
							"description": "Ordered list of attribute names to display"
						}
					]
				},
				"description": "This example returns the `store` associated with a given `SHELF` unit. \n\nIf the `id` and `type` of a data entity are known, a specific field can be requested by combining the `options=values` parameter and the `attrs` parameter. \n\nThe URN returned has a standard format: `urn:ngsi-ld:<entity-type>:<entity-id>`, it  is therefore possible to parse the associated entity `type` and `id`"
			},
			"response": []
		},
		{
			"name": "Obtain all Shelf Units found within a Store",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?q=store==urn:ngsi-ld:STORE:shop1&type=SHELF&options=values&attrs=name",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "store==urn:ngsi-ld:STORE:shop1"
						},
						{
							"key": "type",
							"value": "SHELF",
							"description": "Entity type"
						},
						{
							"key": "options",
							"value": "values",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "attrs",
							"value": "name",
							"description": "Ordered list of attribute names to display"
						}
					]
				},
				"description": "This example returns the `name` of all `SHELF` entities associated with the `shop1`.\n\nThe value of the query parameter `q` holds a URN of the form `urn:ngsi-ld:<entity-type>:<entity-id>` which corresponds to the the Relationship URN in order to filter the information returned."
			},
			"response": []
		},
		{
			"name": "Putting a Product onto  a shelf",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"0000001\", \"type\": \"INVENTORY_ITEM\",\n    \"store\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:STORE:shop1\"\n    },\n    \"shelf\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:SHELF:unit001\"\n    },\n    \"product\": { \n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:PRODUCT:prod001\"\n    },\n    \"stock_count\":{\n        \"type\":\"Integer\", \"value\": 10000\n    },\n    \"shelf_count\":{\n        \"type\":\"Float\", \"value\": 50\n    }\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "The INVENTORY_ITEM entity exists to associate data from other entities.  It has a foreign key relationship to the STORE, SHELF and PRODUCT entities and therefore requires relationship attributes called `store`, `shelf` and `product`.\n\nAssigning a product to a shelf is simply a  create an entity holding the relationship information and any other additional properties."
			},
			"response": []
		},
		{
			"name": "Find all stores in which a product is sold",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?q=product==urn:ngsi-ld:PRODUCT:prod001&options=values&attrs=store&type=INVENTORY_ITEM",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "product==urn:ngsi-ld:PRODUCT:prod001"
						},
						{
							"key": "options",
							"value": "values",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only\n"
						},
						{
							"key": "attrs",
							"value": "store",
							"description": "Ordered list of attribute names to display"
						},
						{
							"key": "type",
							"value": "INVENTORY_ITEM",
							"description": "Entity type"
						}
					]
				},
				"description": "This example returns the URN of all stores in which the product `id=prod001` is sold. The URN returned has a standard format: `urn:ngsi-ld:<entity-type>:<entity-id>`, it  is therefore possible to parse the associated entity `type` and `id`\n\nSince there is no direct relationship between product and store, a query must be made to find all entities which have both `product` and `store` attributes.\n\nIn  our current context the `type` parameter is optional since only one type of entity contains the fields requested in the request"
			},
			"response": []
		},
		{
			"name": "Find all Entities related to a Store",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"actionType\": \"APPEND\",\n  \"entities\": [\n    {\n    \"id\": \"7770\",\n    \"type\": \"Shelf\",\n    \"store\": { \n      \"type\": \"Relationship\",\n      \"value\": \"urn:ngsi-ld:Store:store1\"\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n           \"type\": \"Point\",\n           \"coordinates\": [13.3986112, 52.554699]\n        }\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Corner Unit\"\n    },\n    \"max_capacity\": {\n        \"type\": \"Integer\",\n        \"value\": 50\n    }\n},\n\n {\n      \"id\": \"7771\",\n      \"type\": \"Shelf\",\n      \"store\": {\n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:Store:store1\"\n      },\n      \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            13.3987221,\n            52.5546640\n          ]\n        }\n      },\n      \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Wall Unit 1\"\n      },\n      \"max_capacity\": {\n        \"type\": \"Integer\",\n        \"value\": 100\n      }\n    },\n    \n    {\n      \"id\": \"7772\",\n      \"type\": \"Shelf\",\n      \"store\": {\n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:Store:store1\"\n      },\n      \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            13.3987221,\n            52.5546640\n          ]\n        }\n      },\n      \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Wall Unit 2\"\n      },\n      \"max_capacity\": {\n        \"type\": \"Integer\",\n        \"value\": 100\n      }\n    }\n    \n    \n\n\n\n\n  ]\n}"
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/?q=store==urn:ngsi-ld:STORE:shop1&options=count&attrs=type",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "q",
							"value": "store==urn:ngsi-ld:STORE:shop1"
						},
						{
							"key": "options",
							"value": "count",
							"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
						},
						{
							"key": "attrs",
							"value": "type",
							"description": "Ordered list of attribute names to display"
						}
					]
				},
				"description": "This example returns the key of all entities directly associated with the `shop1`.\n\nThe response lists a series of SHELF and INVENTORY_ITEM entities - there are no products since there is no direct relationship between product and store.\n\nIf this request returns an empty array, the entity has no associates."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f1d42f27-1cae-4144-b06e-237fad09b51b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "028325fa-d62b-4d7a-afbf-5b138040015a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "73b7c194-97af-4388-81ee-6dce0839c507",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		}
	]
}